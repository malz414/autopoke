# Generated by Django 5.1.5 on 2025-02-25 19:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(upload_to='items/')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='pokemon/')),
                ('attack', models.IntegerField()),
                ('defense', models.IntegerField()),
                ('special_attack', models.IntegerField()),
                ('special_defense', models.IntegerField()),
                ('attack_speed', models.DecimalField(decimal_places=2, max_digits=5)),
                ('critical_hit_rate', models.IntegerField(help_text='Percentage value (e.g., 10 for 10%)')),
                ('critical_hit_damage_bonus_rate', models.IntegerField(help_text='Percentage value (e.g., 20 for 20%)')),
                ('rank', models.CharField(max_length=50)),
                ('tier', models.CharField(max_length=50)),
                ('stats_per_level', models.JSONField(blank=True, null=True)),
                ('ability_1_name', models.CharField(blank=True, max_length=255)),
                ('ability_1_description', models.TextField(blank=True)),
                ('ability_2_name', models.CharField(blank=True, max_length=255)),
                ('ability_2_description', models.TextField(blank=True)),
                ('unite_move_name', models.CharField(blank=True, max_length=255)),
                ('unite_move_description', models.TextField(blank=True)),
                ('recommended_items', models.ManyToManyField(blank=True, to='catalogue.item')),
            ],
        ),
        migrations.CreateModel(
            name='LevelStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField()),
                ('attack', models.IntegerField()),
                ('defense', models.IntegerField()),
                ('special_attack', models.IntegerField()),
                ('special_defense', models.IntegerField()),
                ('attack_speed', models.DecimalField(decimal_places=2, max_digits=5)),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='level_stats', to='catalogue.pokemon')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='synergistic_pokemon',
            field=models.ManyToManyField(blank=True, related_name='synergistic_items', to='catalogue.pokemon'),
        ),
        migrations.CreateModel(
            name='PokemonImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='pokemon_images/')),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='catalogue.pokemon')),
            ],
        ),
        migrations.CreateModel(
            name='Synergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(upload_to='synergies/')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('descriptions', models.TextField()),
                ('pokemon', models.ManyToManyField(blank=True, related_name='synergies', to='catalogue.pokemon')),
            ],
        ),
    ]
